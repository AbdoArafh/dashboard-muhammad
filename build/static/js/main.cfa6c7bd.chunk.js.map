{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["list","data","labels","datasets","label","backgroundColor","first","second","arr","colors","diff","r","g","b","sortedArray","sort","a","min","max","length","i","precent","colorsFromTo","borderWidth","App","style","width","options","cutout","responsive","maintainAspectRatio","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKAAe,I,qBCiDTA,EAAO,CAAC,GAAI,GAAI,IAChBC,EAAO,CACXC,OAAQ,CAAC,SAAU,UAAW,YAC9BC,SAAU,CAAC,CACTC,MAAO,aACLH,KAAMD,EACNK,gBAAgB,YAnCD,SAACC,EAAOC,EAAQC,GAWnC,IAVA,IAAIC,EAAS,GACPC,EACDH,EAAOI,EAAIL,EAAMK,EADhBD,EAEDH,EAAOK,EAAIN,EAAMM,EAFhBF,EAGDH,EAAOM,EAAIP,EAAMO,EAGhBC,EAAc,YAAIN,GAAKO,MAAK,SAACC,EAAGH,GAAJ,OAAUG,EAAIH,KAC1CI,EAAMH,EAAY,GAClBI,EAAMJ,EAAYA,EAAYK,OAAS,GACpCC,EAAI,EAAGA,EAAIZ,EAAIW,OAAQC,IAAK,CACnC,IACIC,GADOb,EAAIY,GACOH,IAAQC,EAAMD,GAChCN,EAAKU,EAAUX,EAAUJ,EAAMK,EAC/BC,EAAKS,EAAUX,EAAUJ,EAAMM,EAC/BC,EAAKQ,EAAUX,EAAUJ,EAAMO,EACnCJ,EAAM,sBAAOA,GAAP,eAAsBE,EAAtB,aAA4BC,EAA5B,aAAkCC,EAAlC,OAER,OAAOJ,EAiBIa,CAjDM,CACjBX,EAAG,IACHC,EAAG,IACHC,EAAG,KAGe,CAClBF,EAAG,GACHC,EAAG,IACHC,EAAG,KAwC8Cb,IAE7CuB,YAAa,KAeJC,MAXf,WACE,OACE,qBAAKC,MAAO,CAACC,MAAO,SAApB,SACE,cAAC,IAAD,CAAUzB,KAAMA,EAAM0B,QAAS,CAC7BC,OAAQ,MACRC,YAAY,EACZC,qBAAqB,QCxDdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.cfa6c7bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { Doughnut } from 'react-chartjs-2';\n\n// rgb(210,221,236)\n// rgb(44,123,229)\n\nconst firstColor = {\n  r: 210,\n  g: 221,\n  b: 236\n}\n\nconst secondColor = {\n  r: 44,\n  g: 123,\n  b: 229\n}\n\n\nconst colorsFromTo = (first, second, arr) => {\n  let colors = [];\n  const diff = {\n    r: second.r - first.r,\n    g: second.g - first.g,\n    b: second.b - first.b\n  }\n\n  const sortedArray = [...arr].sort((a, b) => a - b);\n  const min = sortedArray[0];\n  const max = sortedArray[sortedArray.length - 1];\n  for (let i = 0; i < arr.length; i++) {\n    let item = arr[i];\n    let precent = (item - min) / (max - min);\n    let r = (precent * diff.r) + first.r;\n    let g = (precent * diff.g) + first.g;\n    let b = (precent * diff.b) + first.b;\n    colors = [...colors, `rgb(${r}, ${g}, ${b})`];\n  }\n  return colors;\n}\n\n// 'rgb(0, 0, 255)',\n//           'rgb(0, 40, 240)',\n//           'rgb(0, 80, 225)',\n//           'rgb(0, 120, 210)',\n//           'rgb(0, 160, 200)',\n//           'rgb(0, 200, 190)'\n\nconst list = [60, 25, 15];\nconst data = {\n  labels: ['Direct', 'Organic', 'Refferal'],\n  datasets: [{\n    label: '# of Votes',\n      data: list,\n      backgroundColor: [\n          ...colorsFromTo(firstColor, secondColor, list)\n      ],\n      borderWidth: 1\n  }]\n}\n\nfunction App() {\n  return (\n    <div style={{width: \"500px\"}}>\n      <Doughnut data={data} options={{\n        cutout: \"90%\",\n        responsive: true,\n        maintainAspectRatio: true}}/>\n    </div>\n  );\n}\n\nexport default App;\n\n// const objFromTwoArrays = (keys, values) => {\n//   const obj = {}\n//   for (let i = 0; i < keys.length; i++) {\n//     obj[keys[i]] = values[i];\n//   }\n//   return obj\n// }\n\n// const sortObjByArray = (obj, arr) => {\n//   let newArray = [];\n//   for (let item of arr) newArray = [...newArray, obj[item]];\n//   return newArray;\n// }\n\n// const colorsFromTo = (first, second, arr) => {\n//   const n = arr.length;\n//   let colors = [];\n//   const diff = {\n//     r: second.r - first.r,\n//     g: second.g - first.g,\n//     b: second.b - first.b,\n//   }\n//   // todo change this to include all colors\n//   for (let i = 0; i < n; i++) {\n//     colors = [...colors, `rgb(\\\n// ${((diff.r/n) * i) + first.r}, \\\n// ${((diff.g/n) * i) + first.g}, \\\n// ${((diff.b/n) * i) + first.b})`];\n//   }\n//   // todo encounter for similar keys\n//   const unordered = objFromTwoArrays(list, colors);\n//   const ordered = sortObjByArray(unordered, list);\n//   console.log(\"unordered: \", unordered);\n//   // return ordered.reverse();\n//   return colors.reverse();\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}